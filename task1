import numpy as np
my_arr = np.arange(1000000)
my_list = list(range(1000000))
%time for _ in range(10):my_arr2 = my_arr*2
Wall time: 33.9 ms

%time for _ in range(10):my_list2 = [x*2 for x in my_list]
Wall time: 1.16 s

data = np.random.randn(2,3)

data

array([[-0.59084629, -1.97426066, -0.76918066],
       [ 1.06713629, -0.5410042 , -0.249229  ]])

data*10

array([[ -5.90846286, -19.74260663,  -7.69180655],
       [ 10.6713629 ,  -5.41004204,  -2.49229   ]])

data+data

array([[-1.18169257, -3.94852133, -1.53836131],
       [ 2.13427258, -1.08200841, -0.498458  ]])
I
data.shape
data.dtype

dtype('float64')

data.shape

(2, 3)

data1 = [6,7.5,8,0,1]
arr1 =np.array(data1)
arr1

array([6. , 7.5, 8. , 0. , 1. ])

data2 = [[1,2,3,4],[5,6,7,8]]
arr2 = np.array(data2)
arr2

array([[1, 2, 3, 4],
       [5, 6, 7, 8]])

data1.shape
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-14-ad5d39181603> in <module>
----> 1 data1.shape

AttributeError: 'list' object has no attribute 'shape'

arr1.shape

(5,)

arr2.shape

(2, 4)

np.zeros(10)

array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])

np.zeros(3,6)

np.zeros((3,6))

array([[0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.]])

np.range(10)

np.arange(10)

array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

arr1 = np.array([1,2,3],dtype = np.float64)

arr2 = np.array([3,45,6],dtype = np.int32)

arr1.type

arr1.dtype

float_arr = arr2.astype(np.float64)

float_arr.dtype

dtype('float64')

arr = np.array([1.23,3.45,2.34,33,21])
arr.astype(np.int32)

array([ 1,  3,  2, 33, 21])

arr1

array([1., 2., 3.])

arr1-arr1

array([0., 0., 0.])

arr1>arr1

array([False, False, False])

arr = np.arange(10)

arr

array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

arr[3]
3
arr[5:8]

array([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])

arr_slice = arr[5:8]
arr_slice

array([12, 12, 12])

arr_slice = 1

arr_slice

1

arr

array([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])

arr_slice= arr[5:8]

arr_slice[1] = 2
arr

array([ 0,  1,  2,  3,  4, 12,  2, 12,  8,  9])

arr2d = np.array[[1,23,4],[3,4,2],[2,6,2]]
arr2d[2,3]

names == "bob"

array([ True, False, False, False, False])

data = np.random.randn(5,4)
data[names == "bob"]

array([[-1.20265393,  0.91440048,  1.11744955, -0.27260406]])

data[(names == "bob")|(names == "will")]

array([[-1.20265393,  0.91440048,  1.11744955, -0.27260406],
       [ 0.20990364, -0.12735638,  0.11643028,  0.13618865]])

data[data<0] = 0

data

array([[0.        , 0.91440048, 1.11744955, 0.        ],
       [0.        , 0.89490103, 0.        , 0.        ],
       [0.20990364, 0.        , 0.11643028, 0.13618865],
       [0.48192487, 0.        , 0.63981574, 0.        ],
       [0.        , 1.26295013, 0.        , 0.        ]])

arr = np.empty((8,4))

for i in range(8):
    arr[i] = i

arr

array([[0., 0., 0., 0.],
       [1., 1., 1., 1.],
       [2., 2., 2., 2.],
       [3., 3., 3., 3.],
       [4., 4., 4., 4.],
       [5., 5., 5., 5.],
       [6., 6., 6., 6.],
       [7., 7., 7., 7.]])

arr[[3,2,6,4]]

array([[3., 3., 3., 3.],
       [2., 2., 2., 2.],
       [6., 6., 6., 6.],
       [4., 4., 4., 4.]])

arr = np.arange(15).reshape((3,5))

arr

array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14]])

arr.T

array([[ 0,  5, 10],
       [ 1,  6, 11],
       [ 2,  7, 12],
       [ 3,  8, 13],
       [ 4,  9, 14]])

arr = np.arange(10)

np.sqrt(arr)

array([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,
       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])

points = np.arange(-5,5,0.01)

xs,ys = np.meshgrid(points,points)

ys

array([[-5.  , -5.  , -5.  , ..., -5.  , -5.  , -5.  ],
       [-4.99, -4.99, -4.99, ..., -4.99, -4.99, -4.99],
       [-4.98, -4.98, -4.98, ..., -4.98, -4.98, -4.98],
       ...,
       [ 4.97,  4.97,  4.97, ...,  4.97,  4.97,  4.97],
       [ 4.98,  4.98,  4.98, ...,  4.98,  4.98,  4.98],
       [ 4.99,  4.99,  4.99, ...,  4.99,  4.99,  4.99]])

z = np.sqrt(xs**2,ys**2)

z

array([[5.  , 4.99, 4.98, ..., 4.97, 4.98, 4.99],
       [5.  , 4.99, 4.98, ..., 4.97, 4.98, 4.99],
       [5.  , 4.99, 4.98, ..., 4.97, 4.98, 4.99],
       ...,
       [5.  , 4.99, 4.98, ..., 4.97, 4.98, 4.99],
       [5.  , 4.99, 4.98, ..., 4.97, 4.98, 4.99],
       [5.  , 4.99, 4.98, ..., 4.97, 4.98, 4.99]])

np.sqrt(xs**2+ys**2)

array([[7.07106781, 7.06400028, 7.05693985, ..., 7.04988652, 7.05693985,
        7.06400028],
       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,
        7.05692568],
       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,
        7.04985815],
       ...,
       [7.04988652, 7.04279774, 7.03571603, ..., 7.0286414 , 7.03571603,
        7.04279774],
       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,
        7.04985815],
       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,
        7.05692568]])

import matplotlib.pyplot as plt


z = np.sqrt(xs**2+ys**2)

xarr = np.array([1,2,3,4,5])

yarr  = np.array([21,0.2,45,2,4])

cond = np.array([True,False,True,False,True])

np.where(cond,xarr,yarr)

array([1. , 0.2, 3. , 2. , 5. ])
arr = np.random.randn(4,4)

arr>0

array([[False, False,  True, False],
       [ True,  True,  True, False],
       [False, False, False,  True],
       [False,  True, False,  True]])

np.where(arr,2,-2)

array([[2, 2, 2, 2],
       [2, 2, 2, 2],
       [2, 2, 2, 2],
       [2, 2, 2, 2]])

np.where(arr>2,2,-2)

array([[-2, -2, -2, -2],
       [-2, -2, -2, -2],
       [-2, -2, -2, -2],
       [-2, -2, -2, -2]])

np.where(arr>0,2,-2)

array([[-2, -2,  2, -2],
       [ 2,  2,  2, -2],
       [-2, -2, -2,  2],
       [-2,  2, -2,  2]])

np.where(arr>0,3,arr)

array([[-0.41455167, -2.16504458,  3.        , -0.16196314],
       [ 3.        ,  3.        ,  3.        , -1.07718858],
       [-0.55466675, -0.82972128, -0.24375778,  3.        ],
       [-0.33696821,  3.        , -0.13699615,  3.        ]])

arr.mean( )

-0.09371055015231367

arr.sum()

-1.4993688024370186

arr.mean(aixs = 1)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-108-1e112235f5eb> in <module>
----> 1 arr.mean(aixs = 1)

TypeError: _mean() got an unexpected keyword argument 'aixs'

arr.mean(axis=1)

array([-0.50880639,  0.27521127, -0.40355932,  0.26231224])

(arr>0).sum()

7

arr.sort()


array([[-2.16504458, -0.41455167, -0.16196314,  0.70633382],
       [-1.07718858,  0.40882937,  0.69572183,  1.07348245],
       [-0.82972128, -0.55466675, -0.24375778,  0.01390851],
       [-0.33696821, -0.13699615,  0.16878832,  1.35442502]])

names

array(['bob', 'Joe', 'will', 'lobin', 'kamei'], dtype='<U5')

np.unique(names)

array(['Joe', 'bob', 'kamei', 'lobin', 'will'], dtype='<U5')

values = np.array([6,0,0,3,2,5,6])

np.inld(values,[0,2,3])
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-116-9cc1fecd975e> in <module>
----> 1 np.inld(values,[0,2,3])

AttributeError: module 'numpy' has no attribute 'inld'

np.in1d(values,[0,2,3])

array([False,  True,  True,  True,  True, False, False])

np.in1d(values,[0,2,3])

array([False,  True,  True,  True,  True, False, False])
